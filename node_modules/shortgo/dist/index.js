"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/index.ts
var src_exports = {};
__export(src_exports, {
  ShortGo: () => ShortGo
});
module.exports = __toCommonJS(src_exports);

// src/isgd.ts
var import_axios = __toESM(require("axios"));
var import_zod = __toESM(require("zod"));
var shortenReturnSchema = import_zod.default.object({
  shorturl: import_zod.default.string().url()
});
var isGdShorten = (_0) => __async(void 0, [_0], function* ({ url, slug, advancedLog }) {
  try {
    if (slug && (slug.length < 5 || slug.length > 30 || !/^[a-zA-Z0-9_]*$/.test(slug))) {
      throw new Error(
        "Invalid slug. It must have between 5 and 30 alphanumeric characters or underscores"
      );
    }
    const shortenUrl = yield import_axios.default.get(
      `https://is.gd/create.php?format=json&url=${encodeURIComponent(url)}&${slug && `&shorturl=${slug}`}&${advancedLog && `&logstats=1`}`
    );
    return {
      ok: true,
      url: shortenUrl.data.shorturl,
      slug: shortenUrl.data.shorturl.split("/").pop()
    };
  } catch (error) {
    return {
      ok: false,
      error: "Invalid Shortener {is.gd}"
    };
  }
});

// src/vgd.ts
var import_axios2 = __toESM(require("axios"));
var import_zod2 = __toESM(require("zod"));
var shortenReturnSchema2 = import_zod2.default.object({
  shorturl: import_zod2.default.string().url()
});
var vGdShorten = (_0) => __async(void 0, [_0], function* ({ url, slug, advancedLog }) {
  try {
    if (slug && (slug.length < 5 || slug.length > 30 || !/^[a-zA-Z0-9_]*$/.test(slug))) {
      throw new Error(
        "Invalid slug. It must have between 5 and 30 alphanumeric characters or underscores"
      );
    }
    const shortenUrl = yield import_axios2.default.get(
      `https://v.gd/create.php?format=json&url=${encodeURIComponent(url)}&${slug && `&shorturl=${slug}`}&${advancedLog && `&logstats=1`}`
    );
    return {
      ok: true,
      url: shortenUrl.data.shorturl,
      slug: shortenUrl.data.shorturl.split("/").pop()
    };
  } catch (error) {
    return {
      ok: false,
      error: "Invalid Shortener {v.gd}"
    };
  }
});

// src/index.ts
var ShortGo = class {
  constructor(Shortener) {
    this.Shortener = Shortener;
    this.Shortener = Shortener;
  }
  shorten(_a) {
    return __async(this, null, function* () {
      var sh = __objRest(_a, []);
      try {
        let response;
        switch (this.Shortener) {
          case "is.gd":
            response = yield isGdShorten(sh);
            if (!response.ok) {
              const tr = yield vGdShorten(sh);
              if (!tr.ok) {
                throw new Error("Invalid Shortener: is.gd");
              }
              tr.slug = tr.slug || "";
              return tr;
            } else {
              response.slug = response.slug || "";
              return response;
            }
          case "v.gd":
            response = yield vGdShorten(sh);
            if (!response.ok) {
              const tr = yield isGdShorten(sh);
              if (!tr.ok) {
                throw new Error("Invalid Shortener: v.gd");
              }
              tr.slug = tr.slug || "";
              return tr;
            } else {
              response.slug = response.slug || "";
              return response;
            }
          default:
            throw new Error("Invalid Shortener");
        }
      } catch (error) {
        return Response.json({
          ok: false,
          error: error.message
        });
      }
    });
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  ShortGo
});
